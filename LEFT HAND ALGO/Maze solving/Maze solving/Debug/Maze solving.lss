
Maze solving.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000654  000006e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000654  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000208  00800104  00800104  000006ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000071c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  0000075c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001001  00000000  00000000  000007dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c91  00000000  00000000  000017dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000976  00000000  00000000  0000246e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  00002de4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000064f  00000000  00000000  00002ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c7  00000000  00000000  00003523  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000036ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	66 c0       	rjmp	.+204    	; 0xd2 <__bad_interrupt>
   6:	00 00       	nop
   8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
   a:	00 00       	nop
   c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
   e:	00 00       	nop
  10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
  12:	00 00       	nop
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	2e c0       	rjmp	.+92     	; 0xd2 <__bad_interrupt>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
	...

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e4 e5       	ldi	r30, 0x54	; 84
  ac:	f6 e0       	ldi	r31, 0x06	; 6
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a4 30       	cpi	r26, 0x04	; 4
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	23 e0       	ldi	r18, 0x03	; 3
  c0:	a4 e0       	ldi	r26, 0x04	; 4
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	ac 30       	cpi	r26, 0x0C	; 12
  ca:	b2 07       	cpc	r27, r18
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	ef d1       	rcall	.+990    	; 0x4ae <main>
  d0:	bf c2       	rjmp	.+1406   	; 0x650 <_exit>

000000d2 <__bad_interrupt>:
  d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <timer0_init>:
int count;

void timer0_init()
{
	// set up timer with prescaler = 1024
	TCCR0B |= (1 << CS02)|(1 << CS00);
  d4:	85 b5       	in	r24, 0x25	; 37
  d6:	85 60       	ori	r24, 0x05	; 5
  d8:	85 bd       	out	0x25, r24	; 37
	// initialize counter select the bottom value
	TCNT0 = 0;
  da:	16 bc       	out	0x26, r1	; 38
  dc:	08 95       	ret

000000de <calculate_pid>:
}

void calculate_pid(void)
{
	P = error;
  de:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <error>
  e2:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <error+0x1>
  e6:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <P+0x1>
  ea:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <P>
	I = I + previous_I;
  ee:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <I>
  f2:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <I+0x1>
  f6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
  fa:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
  fe:	84 0f       	add	r24, r20
 100:	95 1f       	adc	r25, r21
 102:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <I+0x1>
 106:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <I>
	D = error - previous_error;
 10a:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <previous_error>
 10e:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <previous_error+0x1>
 112:	f9 01       	movw	r30, r18
 114:	e4 1b       	sub	r30, r20
 116:	f5 0b       	sbc	r31, r21
 118:	f0 93 0b 01 	sts	0x010B, r31	; 0x80010b <D+0x1>
 11c:	e0 93 0a 01 	sts	0x010A, r30	; 0x80010a <D>

	PID_value = (Kp * P) + (Ki * I) + (Kd * D);
 120:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <Kp>
 124:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <Kp+0x1>
 128:	24 9f       	mul	r18, r20
 12a:	b0 01       	movw	r22, r0
 12c:	25 9f       	mul	r18, r21
 12e:	70 0d       	add	r23, r0
 130:	34 9f       	mul	r19, r20
 132:	70 0d       	add	r23, r0
 134:	11 24       	eor	r1, r1
 136:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <Ki>
 13a:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <Ki+0x1>
 13e:	8a 9f       	mul	r24, r26
 140:	a0 01       	movw	r20, r0
 142:	8b 9f       	mul	r24, r27
 144:	50 0d       	add	r21, r0
 146:	9a 9f       	mul	r25, r26
 148:	50 0d       	add	r21, r0
 14a:	11 24       	eor	r1, r1
 14c:	46 0f       	add	r20, r22
 14e:	57 1f       	adc	r21, r23
 150:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <Kd>
 154:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <Kd+0x1>
 158:	ea 9f       	mul	r30, r26
 15a:	b0 01       	movw	r22, r0
 15c:	eb 9f       	mul	r30, r27
 15e:	70 0d       	add	r23, r0
 160:	fa 9f       	mul	r31, r26
 162:	70 0d       	add	r23, r0
 164:	11 24       	eor	r1, r1
 166:	46 0f       	add	r20, r22
 168:	57 1f       	adc	r21, r23
 16a:	50 93 09 01 	sts	0x0109, r21	; 0x800109 <PID_value+0x1>
 16e:	40 93 08 01 	sts	0x0108, r20	; 0x800108 <PID_value>

	previous_I = I;
 172:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 176:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
	previous_error = error;
 17a:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <previous_error+0x1>
 17e:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <previous_error>
 182:	08 95       	ret

00000184 <PWM_Init>:
}
void PWM_Init(void)
{
	ICR3 = 0xFFFF;
 184:	8f ef       	ldi	r24, 0xFF	; 255
 186:	9f ef       	ldi	r25, 0xFF	; 255
 188:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
 18c:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
	TCCR3A |= (1<<WGM31)|(1<<COM3A1)|(1<<COM3B1);
 190:	e0 e9       	ldi	r30, 0x90	; 144
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	82 6a       	ori	r24, 0xA2	; 162
 198:	80 83       	st	Z, r24
	TCCR3B |= (1<<WGM33)|(1<<CS30);
 19a:	e1 e9       	ldi	r30, 0x91	; 145
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	81 61       	ori	r24, 0x11	; 17
 1a2:	80 83       	st	Z, r24
	DDRC |= (1<<OC3A)|(1<<OC3B);
 1a4:	87 b1       	in	r24, 0x07	; 7
 1a6:	80 66       	ori	r24, 0x60	; 96
 1a8:	87 b9       	out	0x07, r24	; 7
 1aa:	08 95       	ret

000001ac <sensor>:
		0 0 0 0 0		 102
		0 0 1 1 1        101
		1 1 1 0 0        100
		*/

		if(((CHECKBIT(PINB, PB0))== 0 )&&((CHECKBIT(PINB, PB1))== 0 )&&((CHECKBIT(PINB, PB2))== 0 )&&((CHECKBIT(PINB, PB3))== 0 )&&((CHECKBIT(PINB, PB4))== 1 ))        {error =  4;}
 1ac:	18 9b       	sbis	0x03, 0	; 3
 1ae:	0f c0       	rjmp	.+30     	; 0x1ce <sensor+0x22>
 1b0:	19 9b       	sbis	0x03, 1	; 3
 1b2:	0d c0       	rjmp	.+26     	; 0x1ce <sensor+0x22>
 1b4:	1a 9b       	sbis	0x03, 2	; 3
 1b6:	0b c0       	rjmp	.+22     	; 0x1ce <sensor+0x22>
 1b8:	1b 9b       	sbis	0x03, 3	; 3
 1ba:	09 c0       	rjmp	.+18     	; 0x1ce <sensor+0x22>
 1bc:	1c 99       	sbic	0x03, 4	; 3
 1be:	07 c0       	rjmp	.+14     	; 0x1ce <sensor+0x22>
 1c0:	84 e0       	ldi	r24, 0x04	; 4
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <error+0x1>
 1c8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <error>
 1cc:	08 95       	ret
		else if(((CHECKBIT(PINB, PB0))== 0 )&&((CHECKBIT(PINB, PB1))== 0 )&&((CHECKBIT(PINB, PB2))== 0 )&&((CHECKBIT(PINB, PB3))== 1 )&&((CHECKBIT(PINB, PB4))== 1 ))   {error =  3;}
 1ce:	18 9b       	sbis	0x03, 0	; 3
 1d0:	0f c0       	rjmp	.+30     	; 0x1f0 <sensor+0x44>
 1d2:	19 9b       	sbis	0x03, 1	; 3
 1d4:	0d c0       	rjmp	.+26     	; 0x1f0 <sensor+0x44>
 1d6:	1a 9b       	sbis	0x03, 2	; 3
 1d8:	0b c0       	rjmp	.+22     	; 0x1f0 <sensor+0x44>
 1da:	1b 99       	sbic	0x03, 3	; 3
 1dc:	09 c0       	rjmp	.+18     	; 0x1f0 <sensor+0x44>
 1de:	1c 99       	sbic	0x03, 4	; 3
 1e0:	07 c0       	rjmp	.+14     	; 0x1f0 <sensor+0x44>
 1e2:	83 e0       	ldi	r24, 0x03	; 3
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <error+0x1>
 1ea:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <error>
 1ee:	08 95       	ret
		else if(((CHECKBIT(PINB, PB0))== 0 )&&((CHECKBIT(PINB, PB1))== 0 )&&((CHECKBIT(PINB, PB2))== 0 )&&((CHECKBIT(PINB, PB3))== 1 )&&((CHECKBIT(PINB, PB4))== 0 ))   {error =  2;}
 1f0:	18 9b       	sbis	0x03, 0	; 3
 1f2:	0f c0       	rjmp	.+30     	; 0x212 <sensor+0x66>
 1f4:	19 9b       	sbis	0x03, 1	; 3
 1f6:	0d c0       	rjmp	.+26     	; 0x212 <sensor+0x66>
 1f8:	1a 9b       	sbis	0x03, 2	; 3
 1fa:	0b c0       	rjmp	.+22     	; 0x212 <sensor+0x66>
 1fc:	1b 99       	sbic	0x03, 3	; 3
 1fe:	09 c0       	rjmp	.+18     	; 0x212 <sensor+0x66>
 200:	1c 9b       	sbis	0x03, 4	; 3
 202:	07 c0       	rjmp	.+14     	; 0x212 <sensor+0x66>
 204:	82 e0       	ldi	r24, 0x02	; 2
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <error+0x1>
 20c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <error>
 210:	08 95       	ret
		else if(((CHECKBIT(PINB, PB0))== 0 )&&((CHECKBIT(PINB, PB1))== 0 )&&((CHECKBIT(PINB, PB2))== 1 )&&((CHECKBIT(PINB, PB3))== 1 )&&((CHECKBIT(PINB, PB4))== 0 ))   {error =  1;}
 212:	18 9b       	sbis	0x03, 0	; 3
 214:	0f c0       	rjmp	.+30     	; 0x234 <sensor+0x88>
 216:	19 9b       	sbis	0x03, 1	; 3
 218:	0d c0       	rjmp	.+26     	; 0x234 <sensor+0x88>
 21a:	1a 99       	sbic	0x03, 2	; 3
 21c:	0b c0       	rjmp	.+22     	; 0x234 <sensor+0x88>
 21e:	1b 99       	sbic	0x03, 3	; 3
 220:	09 c0       	rjmp	.+18     	; 0x234 <sensor+0x88>
 222:	1c 9b       	sbis	0x03, 4	; 3
 224:	07 c0       	rjmp	.+14     	; 0x234 <sensor+0x88>
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <error+0x1>
 22e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <error>
 232:	08 95       	ret
		else if(((CHECKBIT(PINB, PB0))== 0 )&&((CHECKBIT(PINB, PB1))== 0 )&&((CHECKBIT(PINB, PB2))== 1 )&&((CHECKBIT(PINB, PB3))== 0 )&&((CHECKBIT(PINB, PB4))== 0 ))   {error =  0;}
 234:	18 9b       	sbis	0x03, 0	; 3
 236:	0d c0       	rjmp	.+26     	; 0x252 <sensor+0xa6>
 238:	19 9b       	sbis	0x03, 1	; 3
 23a:	0b c0       	rjmp	.+22     	; 0x252 <sensor+0xa6>
 23c:	1a 99       	sbic	0x03, 2	; 3
 23e:	09 c0       	rjmp	.+18     	; 0x252 <sensor+0xa6>
 240:	1b 9b       	sbis	0x03, 3	; 3
 242:	07 c0       	rjmp	.+14     	; 0x252 <sensor+0xa6>
 244:	1c 9b       	sbis	0x03, 4	; 3
 246:	05 c0       	rjmp	.+10     	; 0x252 <sensor+0xa6>
 248:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <error+0x1>
 24c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <error>
 250:	08 95       	ret
		else if(((CHECKBIT(PINB, PB0))== 0 )&&((CHECKBIT(PINB, PB1))== 1 )&&((CHECKBIT(PINB, PB2))== 1 )&&((CHECKBIT(PINB, PB3))== 0 )&&((CHECKBIT(PINB, PB4))== 0 ))   {error =- 1;}
 252:	18 9b       	sbis	0x03, 0	; 3
 254:	0f c0       	rjmp	.+30     	; 0x274 <sensor+0xc8>
 256:	19 99       	sbic	0x03, 1	; 3
 258:	0d c0       	rjmp	.+26     	; 0x274 <sensor+0xc8>
 25a:	1a 99       	sbic	0x03, 2	; 3
 25c:	0b c0       	rjmp	.+22     	; 0x274 <sensor+0xc8>
 25e:	1b 9b       	sbis	0x03, 3	; 3
 260:	09 c0       	rjmp	.+18     	; 0x274 <sensor+0xc8>
 262:	1c 9b       	sbis	0x03, 4	; 3
 264:	07 c0       	rjmp	.+14     	; 0x274 <sensor+0xc8>
 266:	8f ef       	ldi	r24, 0xFF	; 255
 268:	9f ef       	ldi	r25, 0xFF	; 255
 26a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <error+0x1>
 26e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <error>
 272:	08 95       	ret
		else if(((CHECKBIT(PINB, PB0))== 0 )&&((CHECKBIT(PINB, PB1))== 1 )&&((CHECKBIT(PINB, PB2))== 0 )&&((CHECKBIT(PINB, PB3))== 0 )&&((CHECKBIT(PINB, PB4))== 0 ))   {error = -2;}
 274:	18 9b       	sbis	0x03, 0	; 3
 276:	0f c0       	rjmp	.+30     	; 0x296 <sensor+0xea>
 278:	19 99       	sbic	0x03, 1	; 3
 27a:	0d c0       	rjmp	.+26     	; 0x296 <sensor+0xea>
 27c:	1a 9b       	sbis	0x03, 2	; 3
 27e:	0b c0       	rjmp	.+22     	; 0x296 <sensor+0xea>
 280:	1b 9b       	sbis	0x03, 3	; 3
 282:	09 c0       	rjmp	.+18     	; 0x296 <sensor+0xea>
 284:	1c 9b       	sbis	0x03, 4	; 3
 286:	07 c0       	rjmp	.+14     	; 0x296 <sensor+0xea>
 288:	8e ef       	ldi	r24, 0xFE	; 254
 28a:	9f ef       	ldi	r25, 0xFF	; 255
 28c:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <error+0x1>
 290:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <error>
 294:	08 95       	ret
		else if(((CHECKBIT(PINB, PB0))== 1 )&&((CHECKBIT(PINB, PB1))== 1 )&&((CHECKBIT(PINB, PB2))== 0 )&&((CHECKBIT(PINB, PB3))== 0 )&&((CHECKBIT(PINB, PB4))== 0 ))   {error = -3;}
 296:	18 99       	sbic	0x03, 0	; 3
 298:	0f c0       	rjmp	.+30     	; 0x2b8 <sensor+0x10c>
 29a:	19 99       	sbic	0x03, 1	; 3
 29c:	0d c0       	rjmp	.+26     	; 0x2b8 <sensor+0x10c>
 29e:	1a 9b       	sbis	0x03, 2	; 3
 2a0:	0b c0       	rjmp	.+22     	; 0x2b8 <sensor+0x10c>
 2a2:	1b 9b       	sbis	0x03, 3	; 3
 2a4:	09 c0       	rjmp	.+18     	; 0x2b8 <sensor+0x10c>
 2a6:	1c 9b       	sbis	0x03, 4	; 3
 2a8:	07 c0       	rjmp	.+14     	; 0x2b8 <sensor+0x10c>
 2aa:	8d ef       	ldi	r24, 0xFD	; 253
 2ac:	9f ef       	ldi	r25, 0xFF	; 255
 2ae:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <error+0x1>
 2b2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <error>
 2b6:	08 95       	ret
		else if(((CHECKBIT(PINB, PB0))== 1 )&&((CHECKBIT(PINB, PB1))== 0 )&&((CHECKBIT(PINB, PB2))== 0 )&&((CHECKBIT(PINB, PB3))== 0 )&&((CHECKBIT(PINB, PB4))== 0 ))   {error = -4;}
 2b8:	18 99       	sbic	0x03, 0	; 3
 2ba:	0f c0       	rjmp	.+30     	; 0x2da <sensor+0x12e>
 2bc:	19 9b       	sbis	0x03, 1	; 3
 2be:	0d c0       	rjmp	.+26     	; 0x2da <sensor+0x12e>
 2c0:	1a 9b       	sbis	0x03, 2	; 3
 2c2:	0b c0       	rjmp	.+22     	; 0x2da <sensor+0x12e>
 2c4:	1b 9b       	sbis	0x03, 3	; 3
 2c6:	09 c0       	rjmp	.+18     	; 0x2da <sensor+0x12e>
 2c8:	1c 9b       	sbis	0x03, 4	; 3
 2ca:	07 c0       	rjmp	.+14     	; 0x2da <sensor+0x12e>
 2cc:	8c ef       	ldi	r24, 0xFC	; 252
 2ce:	9f ef       	ldi	r25, 0xFF	; 255
 2d0:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <error+0x1>
 2d4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <error>
 2d8:	08 95       	ret
		else if(((CHECKBIT(PINB, PB0))== 1 )&&((CHECKBIT(PINB, PB1))== 1 )&&((CHECKBIT(PINB, PB2))== 1 )&&((CHECKBIT(PINB, PB3))== 0 )&&((CHECKBIT(PINB, PB4))== 0 ))   {error = 100;} // Turn robot left side
 2da:	18 99       	sbic	0x03, 0	; 3
 2dc:	0f c0       	rjmp	.+30     	; 0x2fc <sensor+0x150>
 2de:	19 99       	sbic	0x03, 1	; 3
 2e0:	0d c0       	rjmp	.+26     	; 0x2fc <sensor+0x150>
 2e2:	1a 99       	sbic	0x03, 2	; 3
 2e4:	0b c0       	rjmp	.+22     	; 0x2fc <sensor+0x150>
 2e6:	1b 9b       	sbis	0x03, 3	; 3
 2e8:	09 c0       	rjmp	.+18     	; 0x2fc <sensor+0x150>
 2ea:	1c 9b       	sbis	0x03, 4	; 3
 2ec:	07 c0       	rjmp	.+14     	; 0x2fc <sensor+0x150>
 2ee:	84 e6       	ldi	r24, 0x64	; 100
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <error+0x1>
 2f6:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <error>
 2fa:	08 95       	ret
		else if(((CHECKBIT(PINB, PB0))== 0 )&&((CHECKBIT(PINB, PB1))== 0 )&&((CHECKBIT(PINB, PB2))== 1 )&&((CHECKBIT(PINB, PB3))== 1 )&&((CHECKBIT(PINB, PB4))== 1 ))   {error = 101;} // Turn robot right side
 2fc:	18 9b       	sbis	0x03, 0	; 3
 2fe:	0f c0       	rjmp	.+30     	; 0x31e <sensor+0x172>
 300:	19 9b       	sbis	0x03, 1	; 3
 302:	0d c0       	rjmp	.+26     	; 0x31e <sensor+0x172>
 304:	1a 99       	sbic	0x03, 2	; 3
 306:	0b c0       	rjmp	.+22     	; 0x31e <sensor+0x172>
 308:	1b 99       	sbic	0x03, 3	; 3
 30a:	09 c0       	rjmp	.+18     	; 0x31e <sensor+0x172>
 30c:	1c 99       	sbic	0x03, 4	; 3
 30e:	07 c0       	rjmp	.+14     	; 0x31e <sensor+0x172>
 310:	85 e6       	ldi	r24, 0x65	; 101
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <error+0x1>
 318:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <error>
 31c:	08 95       	ret
		else if(((CHECKBIT(PINB, PB0))== 0 )&&((CHECKBIT(PINB, PB1))== 0 )&&((CHECKBIT(PINB, PB2))== 0 )&&((CHECKBIT(PINB, PB3))== 0 )&&((CHECKBIT(PINB, PB4))== 0 ))   {error = 102;} // Make U turn
 31e:	18 9b       	sbis	0x03, 0	; 3
 320:	0f c0       	rjmp	.+30     	; 0x340 <sensor+0x194>
 322:	19 9b       	sbis	0x03, 1	; 3
 324:	0d c0       	rjmp	.+26     	; 0x340 <sensor+0x194>
 326:	1a 9b       	sbis	0x03, 2	; 3
 328:	0b c0       	rjmp	.+22     	; 0x340 <sensor+0x194>
 32a:	1b 9b       	sbis	0x03, 3	; 3
 32c:	09 c0       	rjmp	.+18     	; 0x340 <sensor+0x194>
 32e:	1c 9b       	sbis	0x03, 4	; 3
 330:	07 c0       	rjmp	.+14     	; 0x340 <sensor+0x194>
 332:	86 e6       	ldi	r24, 0x66	; 102
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <error+0x1>
 33a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <error>
 33e:	08 95       	ret
		else if(((CHECKBIT(PINB, PB0))== 1 )&&((CHECKBIT(PINB, PB1))== 1 )&&((CHECKBIT(PINB, PB2))== 1 )&&((CHECKBIT(PINB, PB3))== 1 )&&((CHECKBIT(PINB, PB4))== 1 ))   {error = 103;} // Turn left side or stop
 340:	18 99       	sbic	0x03, 0	; 3
 342:	0e c0       	rjmp	.+28     	; 0x360 <sensor+0x1b4>
 344:	19 99       	sbic	0x03, 1	; 3
 346:	0c c0       	rjmp	.+24     	; 0x360 <sensor+0x1b4>
 348:	1a 99       	sbic	0x03, 2	; 3
 34a:	0a c0       	rjmp	.+20     	; 0x360 <sensor+0x1b4>
 34c:	1b 99       	sbic	0x03, 3	; 3
 34e:	08 c0       	rjmp	.+16     	; 0x360 <sensor+0x1b4>
 350:	1c 99       	sbic	0x03, 4	; 3
 352:	06 c0       	rjmp	.+12     	; 0x360 <sensor+0x1b4>
 354:	87 e6       	ldi	r24, 0x67	; 103
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <error+0x1>
 35c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <error>
 360:	08 95       	ret

00000362 <fwd>:
}

void fwd(void)
	{
		//MOVE FORWARD
		SETBIT(PORTC, M1_CW);
 362:	40 9a       	sbi	0x08, 0	; 8
		CLEARBIT(PORTC, M1_CCW);
 364:	41 98       	cbi	0x08, 1	; 8
		SETBIT(PORTC, M2_CW);
 366:	42 9a       	sbi	0x08, 2	; 8
		CLEARBIT(PORTC, M2_CCW);
 368:	43 98       	cbi	0x08, 3	; 8
 36a:	08 95       	ret

0000036c <left>:
	}

void left(void)
	{
		//LEFT TURN
		SETBIT(PORTC, M1_CW);
 36c:	40 9a       	sbi	0x08, 0	; 8
		CLEARBIT(PORTC, M1_CCW);
 36e:	41 98       	cbi	0x08, 1	; 8
		CLEARBIT(PORTC, M2_CW);
 370:	42 98       	cbi	0x08, 2	; 8
		SETBIT(PORTC, M2_CCW);
 372:	43 9a       	sbi	0x08, 3	; 8
 374:	08 95       	ret

00000376 <right>:
	}

void right(void)
	{
		// RIGHT TURN
		CLEARBIT(PORTC, M1_CW);
 376:	40 98       	cbi	0x08, 0	; 8
		SETBIT(PORTC, M1_CCW);
 378:	41 9a       	sbi	0x08, 1	; 8
		SETBIT(PORTC, M2_CW);
 37a:	42 9a       	sbi	0x08, 2	; 8
		CLEARBIT(PORTC, M2_CCW);
 37c:	43 98       	cbi	0x08, 3	; 8
 37e:	08 95       	ret

00000380 <u_turn>:
	}

void u_turn(void)
	{
		// U TURN
		CLEARBIT(PORTC, M1_CW);
 380:	40 98       	cbi	0x08, 0	; 8
		SETBIT(PORTC, M1_CCW);
 382:	41 9a       	sbi	0x08, 1	; 8
		SETBIT(PORTC, M2_CW);
 384:	42 9a       	sbi	0x08, 2	; 8
		CLEARBIT(PORTC, M2_CCW);
 386:	43 98       	cbi	0x08, 3	; 8
 388:	08 95       	ret

0000038a <stop>:
	}

void stop(void)
	{
		//STOP
		CLEARBIT(PORTC, M1_CW);
 38a:	40 98       	cbi	0x08, 0	; 8
		CLEARBIT(PORTC, M1_CCW);
 38c:	41 98       	cbi	0x08, 1	; 8
		CLEARBIT(PORTC, M2_CW);
 38e:	42 98       	cbi	0x08, 2	; 8
		CLEARBIT(PORTC, M2_CCW);
 390:	43 98       	cbi	0x08, 3	; 8
 392:	08 95       	ret

00000394 <extra_inch>:
	}
void extra_inch(void)
	{
		timer0_init();
 394:	9f de       	rcall	.-706    	; 0xd4 <timer0_init>
			
		if(TCNT0 >= 125 )
 396:	86 b5       	in	r24, 0x26	; 38
 398:	8d 37       	cpi	r24, 0x7D	; 125
 39a:	50 f0       	brcs	.+20     	; 0x3b0 <extra_inch+0x1c>
		{
			count++;
 39c:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <count>
 3a0:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <count+0x1>
 3a4:	01 96       	adiw	r24, 0x01	; 1
 3a6:	90 93 0b 03 	sts	0x030B, r25	; 0x80030b <count+0x1>
 3aa:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <count>
			TCNT0 = 0;
 3ae:	16 bc       	out	0x26, r1	; 38
		}
		if(count>=125)
 3b0:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <count>
 3b4:	90 91 0b 03 	lds	r25, 0x030B	; 0x80030b <count+0x1>
 3b8:	8d 37       	cpi	r24, 0x7D	; 125
 3ba:	91 05       	cpc	r25, r1
 3bc:	4c f0       	brlt	.+18     	; 0x3d0 <extra_inch+0x3c>
		{
			//MOVE FORWARD
			SETBIT(PORTC, M1_CW);
 3be:	40 9a       	sbi	0x08, 0	; 8
			CLEARBIT(PORTC, M1_CCW);
 3c0:	41 98       	cbi	0x08, 1	; 8
			SETBIT(PORTC, M2_CW);
 3c2:	42 9a       	sbi	0x08, 2	; 8
			CLEARBIT(PORTC, M2_CCW);
 3c4:	43 98       	cbi	0x08, 3	; 8
			TCNT0 = 0;         // Resetting the counter to Zero
 3c6:	16 bc       	out	0x26, r1	; 38
			count = 0;
 3c8:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <count+0x1>
 3cc:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <count>
 3d0:	08 95       	ret

000003d2 <simplifyPath>:
	pathLength ++;
	simplifyPath(); // Simplify the learned path.
}

void simplifyPath(void)
{
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
	// only simplify the path if the second-to-last turn was a 'B'
	if(pathLength < 3 || path[pathLength-2] != 'B')
 3d6:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <pathLength>
 3da:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <pathLength+0x1>
 3de:	23 30       	cpi	r18, 0x03	; 3
 3e0:	31 05       	cpc	r19, r1
 3e2:	0c f4       	brge	.+2      	; 0x3e6 <simplifyPath+0x14>
 3e4:	51 c0       	rjmp	.+162    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 3e6:	e9 01       	movw	r28, r18
 3e8:	22 97       	sbiw	r28, 0x02	; 2
 3ea:	fe 01       	movw	r30, r28
 3ec:	ea 5e       	subi	r30, 0xEA	; 234
 3ee:	fe 4f       	sbci	r31, 0xFE	; 254
 3f0:	80 81       	ld	r24, Z
 3f2:	82 34       	cpi	r24, 0x42	; 66
 3f4:	09 f0       	breq	.+2      	; 0x3f8 <simplifyPath+0x26>
 3f6:	48 c0       	rjmp	.+144    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 3f8:	f9 01       	movw	r30, r18
 3fa:	ea 5e       	subi	r30, 0xEA	; 234
 3fc:	fe 4f       	sbci	r31, 0xFE	; 254
 3fe:	b9 01       	movw	r22, r18
 400:	6d 5e       	subi	r22, 0xED	; 237
 402:	7e 4f       	sbci	r23, 0xFE	; 254
 404:	40 e0       	ldi	r20, 0x00	; 0
 406:	50 e0       	ldi	r21, 0x00	; 0

	int totalAngle = 0;
	int i;
	for(i=1;i<=3;i++)
	{
		switch(path[pathLength-i])
 408:	92 91       	ld	r25, -Z
 40a:	9c 34       	cpi	r25, 0x4C	; 76
 40c:	41 f0       	breq	.+16     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 40e:	92 35       	cpi	r25, 0x52	; 82
 410:	19 f0       	breq	.+6      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 412:	92 34       	cpi	r25, 0x42	; 66
 414:	49 f4       	brne	.+18     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 416:	06 c0       	rjmp	.+12     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		{
			case 'R':
			totalAngle += 90;
 418:	46 5a       	subi	r20, 0xA6	; 166
 41a:	5f 4f       	sbci	r21, 0xFF	; 255
			break;
 41c:	05 c0       	rjmp	.+10     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
			case 'L':
			totalAngle += 270;
 41e:	42 5f       	subi	r20, 0xF2	; 242
 420:	5e 4f       	sbci	r21, 0xFE	; 254
			break;
 422:	02 c0       	rjmp	.+4      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
			case 'B':
			totalAngle += 180;
 424:	4c 54       	subi	r20, 0x4C	; 76
 426:	5f 4f       	sbci	r21, 0xFF	; 255
	if(pathLength < 3 || path[pathLength-2] != 'B')
	return;

	int totalAngle = 0;
	int i;
	for(i=1;i<=3;i++)
 428:	e6 17       	cp	r30, r22
 42a:	f7 07       	cpc	r31, r23
 42c:	69 f7       	brne	.-38     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
	}

	// Get the angle as a number between 0 and 360 degrees.
	totalAngle = totalAngle % 360;
  
	switch(totalAngle)
 42e:	ca 01       	movw	r24, r20
 430:	68 e6       	ldi	r22, 0x68	; 104
 432:	71 e0       	ldi	r23, 0x01	; 1
 434:	e6 d0       	rcall	.+460    	; 0x602 <__divmodhi4>
 436:	8a 35       	cpi	r24, 0x5A	; 90
 438:	91 05       	cpc	r25, r1
 43a:	89 f0       	breq	.+34     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 43c:	1c f4       	brge	.+6      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 43e:	89 2b       	or	r24, r25
 440:	f9 f4       	brne	.+62     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 442:	07 c0       	rjmp	.+14     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 444:	84 3b       	cpi	r24, 0xB4	; 180
 446:	91 05       	cpc	r25, r1
 448:	81 f0       	breq	.+32     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 44a:	8e 30       	cpi	r24, 0x0E	; 14
 44c:	91 40       	sbci	r25, 0x01	; 1
 44e:	99 f0       	breq	.+38     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 450:	17 c0       	rjmp	.+46     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
	{
		case 0:
		path[pathLength - 3] = 'S';
 452:	f9 01       	movw	r30, r18
 454:	ed 5e       	subi	r30, 0xED	; 237
 456:	fe 4f       	sbci	r31, 0xFE	; 254
 458:	83 e5       	ldi	r24, 0x53	; 83
 45a:	80 83       	st	Z, r24
		break;
 45c:	11 c0       	rjmp	.+34     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
		case 90:
		path[pathLength - 3] = 'R';
 45e:	f9 01       	movw	r30, r18
 460:	ed 5e       	subi	r30, 0xED	; 237
 462:	fe 4f       	sbci	r31, 0xFE	; 254
 464:	82 e5       	ldi	r24, 0x52	; 82
 466:	80 83       	st	Z, r24
		break;
 468:	0b c0       	rjmp	.+22     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
		case 180:
		path[pathLength - 3] = 'B';
 46a:	f9 01       	movw	r30, r18
 46c:	ed 5e       	subi	r30, 0xED	; 237
 46e:	fe 4f       	sbci	r31, 0xFE	; 254
 470:	82 e4       	ldi	r24, 0x42	; 66
 472:	80 83       	st	Z, r24
		break;
 474:	05 c0       	rjmp	.+10     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
		case 270:
		path[pathLength - 3] = 'L';
 476:	f9 01       	movw	r30, r18
 478:	ed 5e       	subi	r30, 0xED	; 237
 47a:	fe 4f       	sbci	r31, 0xFE	; 254
 47c:	8c e4       	ldi	r24, 0x4C	; 76
 47e:	80 83       	st	Z, r24
		break;
	}

	// The path is now two steps shorter.
	pathLength -= 2;
 480:	d0 93 15 01 	sts	0x0115, r29	; 0x800115 <pathLength+0x1>
 484:	c0 93 14 01 	sts	0x0114, r28	; 0x800114 <pathLength>
	
}
 488:	df 91       	pop	r29
 48a:	cf 91       	pop	r28
 48c:	08 95       	ret

0000048e <recIntersection>:
	
void simplifyPath(void);

void recIntersection(char direction)
{
	path[pathLength] = direction; // Store the intersection in the path variable.
 48e:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <pathLength>
 492:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <pathLength+0x1>
 496:	f9 01       	movw	r30, r18
 498:	ea 5e       	subi	r30, 0xEA	; 234
 49a:	fe 4f       	sbci	r31, 0xFE	; 254
 49c:	80 83       	st	Z, r24
	pathLength ++;
 49e:	2f 5f       	subi	r18, 0xFF	; 255
 4a0:	3f 4f       	sbci	r19, 0xFF	; 255
 4a2:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <pathLength+0x1>
 4a6:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <pathLength>
	simplifyPath(); // Simplify the learned path.
 4aa:	93 cf       	rjmp	.-218    	; 0x3d2 <simplifyPath>
 4ac:	08 95       	ret

000004ae <main>:
}


int main(void)
{
	DDRA &= ~(1<<PB0);
 4ae:	08 98       	cbi	0x01, 0	; 1
	DDRA &= ~(1<<PB1);
 4b0:	09 98       	cbi	0x01, 1	; 1
	DDRA &= ~(1<<PB2);
 4b2:	0a 98       	cbi	0x01, 2	; 1
	DDRA &= ~(1<<PB3);
 4b4:	0b 98       	cbi	0x01, 3	; 1
	DDRA &= ~(1<<PB4);
 4b6:	0c 98       	cbi	0x01, 4	; 1
	
	PWM_Init();
 4b8:	65 de       	rcall	.-822    	; 0x184 <PWM_Init>
	calculate_pid();
 4ba:	11 de       	rcall	.-990    	; 0xde <calculate_pid>
 4bc:	87 b1       	in	r24, 0x07	; 7
	
	
    DDRC |= (1<<M1_CCW)|(1<<M1_CW)|(1<<M2_CCW)|(1<<M2_CW);
 4be:	8f 60       	ori	r24, 0x0F	; 15
 4c0:	87 b9       	out	0x07, r24	; 7
 4c2:	8d b1       	in	r24, 0x0d	; 13
	DDRE |= (1<<DDE6)|(1<<DDE7);    
 4c4:	80 6c       	ori	r24, 0xC0	; 192
 4c6:	8d b9       	out	0x0d, r24	; 13
 4c8:	8e b1       	in	r24, 0x0e	; 14
	PORTE |= (1<<PE0)|(1<<PE1);
 4ca:	83 60       	ori	r24, 0x03	; 3
 4cc:	8e b9       	out	0x0e, r24	; 14
 4ce:	45 9a       	sbi	0x08, 5	; 8
   
    SETBIT(PORTC,OC3B);
 4d0:	46 9a       	sbi	0x08, 6	; 8
    SETBIT(PORTC,OC3A);
 4d2:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	
	OCR3A = 0X0000;
 4d6:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 4da:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
	OCR3B = 0X0000;
 4de:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
 4e2:	76 98       	cbi	0x0e, 6	; 14
	
	CLEARBIT(PORTE, LED1);
 4e4:	77 98       	cbi	0x0e, 7	; 14
	CLEARBIT(PORTE, LED2);
 4e6:	c0 e9       	ldi	r28, 0x90	; 144
	
    
    while (1) 
    {
		TCCR3A = (0<<COM3A0)|(0<<COM3A1)|(0<<COM3B0)|(0<<COM3B1);
 4e8:	d0 e0       	ldi	r29, 0x00	; 0
 4ea:	0f 2e       	mov	r0, r31
					recIntersection('L');}
					break;
			
			default:
					{calculate_pid();
					OCR3A = 0X8907+PID_value; 
 4ec:	f8 e9       	ldi	r31, 0x98	; 152
 4ee:	cf 2e       	mov	r12, r31
 4f0:	d1 2c       	mov	r13, r1
 4f2:	f0 2d       	mov	r31, r0
 4f4:	0f 2e       	mov	r0, r31
					OCR3B = 0XB3FF-PID_value; //B3FF=46079=(65535*180)/256
 4f6:	ee 24       	eor	r14, r14
 4f8:	ea 94       	dec	r14
 4fa:	f3 eb       	ldi	r31, 0xB3	; 179
 4fc:	ff 2e       	mov	r15, r31
 4fe:	f0 2d       	mov	r31, r0
 500:	0a e9       	ldi	r16, 0x9A	; 154
 502:	10 e0       	ldi	r17, 0x00	; 0
 504:	18 82       	st	Y, r1
	CLEARBIT(PORTE, LED2);
	
    
    while (1) 
    {
		TCCR3A = (0<<COM3A0)|(0<<COM3A1)|(0<<COM3B0)|(0<<COM3B1);
 506:	60 99       	sbic	0x0c, 0	; 12
	if ((CHECKBIT(PINE, SW1))){
 508:	77 c0       	rjmp	.+238    	; 0x5f8 <main+0x14a>
 50a:	76 9a       	sbi	0x0e, 6	; 14
		SETBIT(PORTE, LED1); 
		CLEARBIT(PORTE, LED2); 
 50c:	77 98       	cbi	0x0e, 7	; 14
		
		sensor();
 50e:	4e de       	rcall	.-868    	; 0x1ac <sensor>
 510:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <error>
		
		switch (error)
 514:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <error+0x1>
 518:	85 36       	cpi	r24, 0x65	; 101
 51a:	91 05       	cpc	r25, r1
 51c:	09 f4       	brne	.+2      	; 0x520 <main+0x72>
 51e:	35 c0       	rjmp	.+106    	; 0x58a <main+0xdc>
 520:	2c f4       	brge	.+10     	; 0x52c <main+0x7e>
 522:	84 36       	cpi	r24, 0x64	; 100
 524:	91 05       	cpc	r25, r1
 526:	09 f4       	brne	.+2      	; 0x52a <main+0x7c>
 528:	47 c0       	rjmp	.+142    	; 0x5b8 <main+0x10a>
 52a:	51 c0       	rjmp	.+162    	; 0x5ce <main+0x120>
 52c:	86 36       	cpi	r24, 0x66	; 102
 52e:	91 05       	cpc	r25, r1
 530:	21 f0       	breq	.+8      	; 0x53a <main+0x8c>
 532:	87 36       	cpi	r24, 0x67	; 103
 534:	91 05       	cpc	r25, r1
 536:	61 f0       	breq	.+24     	; 0x550 <main+0xa2>
		{
			case 102:
					{do {
						u_turn();
 538:	4a c0       	rjmp	.+148    	; 0x5ce <main+0x120>
 53a:	22 df       	rcall	.-444    	; 0x380 <u_turn>
						sensor();
 53c:	37 de       	rcall	.-914    	; 0x1ac <sensor>
 53e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <error>
				
							/*if (error == 0) {
								stop();
								delay(200);
							}*/
					} while (error != 0);
 542:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <error+0x1>
 546:	89 2b       	or	r24, r25
					recIntersection('B');}
 548:	c1 f7       	brne	.-16     	; 0x53a <main+0x8c>
 54a:	82 e4       	ldi	r24, 0x42	; 66
 54c:	a0 df       	rcall	.-192    	; 0x48e <recIntersection>
					break;
 54e:	54 c0       	rjmp	.+168    	; 0x5f8 <main+0x14a>
			
			case 103:
					{extra_inch();
 550:	21 df       	rcall	.-446    	; 0x394 <extra_inch>
 552:	2c de       	rcall	.-936    	; 0x1ac <sensor>
					sensor();
 554:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <error>
					if (error == 103) {		left();
 558:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <error+0x1>
 55c:	87 36       	cpi	r24, 0x67	; 103
 55e:	91 05       	cpc	r25, r1
 560:	91 f4       	brne	.+36     	; 0x586 <main+0xd8>
 562:	04 df       	rcall	.-504    	; 0x36c <left>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 564:	8f e4       	ldi	r24, 0x4F	; 79
 566:	93 ec       	ldi	r25, 0xC3	; 195
 568:	01 97       	sbiw	r24, 0x01	; 1
 56a:	f1 f7       	brne	.-4      	; 0x568 <main+0xba>
 56c:	00 c0       	rjmp	.+0      	; 0x56e <main+0xc0>
 56e:	00 00       	nop
											_delay_ms(200);
											do {
												sensor();
 570:	1d de       	rcall	.-966    	; 0x1ac <sensor>
												left();
 572:	fc de       	rcall	.-520    	; 0x36c <left>
											} while (error != 0); 
 574:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <error>
 578:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <error+0x1>
											recIntersection('L');
 57c:	89 2b       	or	r24, r25
 57e:	c1 f7       	brne	.-16     	; 0x570 <main+0xc2>
 580:	8c e4       	ldi	r24, 0x4C	; 76
										}
					else stop();}
 582:	85 df       	rcall	.-246    	; 0x48e <recIntersection>
 584:	39 c0       	rjmp	.+114    	; 0x5f8 <main+0x14a>
					break;
			
			case 101:
				{	extra_inch();
 586:	01 df       	rcall	.-510    	; 0x38a <stop>
 588:	37 c0       	rjmp	.+110    	; 0x5f8 <main+0x14a>
					sensor();
 58a:	04 df       	rcall	.-504    	; 0x394 <extra_inch>
 58c:	0f de       	rcall	.-994    	; 0x1ac <sensor>
					if (error == 102) {do {
 58e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <error>
 592:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <error+0x1>
 596:	86 36       	cpi	r24, 0x66	; 102
											right();
 598:	91 05       	cpc	r25, r1
											sensor();
 59a:	59 f4       	brne	.+22     	; 0x5b2 <main+0x104>
 59c:	ec de       	rcall	.-552    	; 0x376 <right>
												} while (error != 0);
 59e:	06 de       	rcall	.-1012   	; 0x1ac <sensor>
 5a0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <error>
 5a4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <error+0x1>
												 recIntersection('R');
 5a8:	89 2b       	or	r24, r25
 5aa:	c1 f7       	brne	.-16     	; 0x59c <main+0xee>
 5ac:	82 e5       	ldi	r24, 0x52	; 82
											}
					else recIntersection('S');}
 5ae:	6f df       	rcall	.-290    	; 0x48e <recIntersection>
 5b0:	23 c0       	rjmp	.+70     	; 0x5f8 <main+0x14a>
 5b2:	83 e5       	ldi	r24, 0x53	; 83
 5b4:	6c df       	rcall	.-296    	; 0x48e <recIntersection>
					break;
			
			case 100:
					{do {
						left();
 5b6:	20 c0       	rjmp	.+64     	; 0x5f8 <main+0x14a>
 5b8:	d9 de       	rcall	.-590    	; 0x36c <left>
						sensor();
 5ba:	f8 dd       	rcall	.-1040   	; 0x1ac <sensor>
 5bc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <error>
					} while (error != 0);
 5c0:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <error+0x1>
 5c4:	89 2b       	or	r24, r25
 5c6:	c1 f7       	brne	.-16     	; 0x5b8 <main+0x10a>
 5c8:	8c e4       	ldi	r24, 0x4C	; 76
					recIntersection('L');}
 5ca:	61 df       	rcall	.-318    	; 0x48e <recIntersection>
 5cc:	15 c0       	rjmp	.+42     	; 0x5f8 <main+0x14a>
					break;
 5ce:	87 dd       	rcall	.-1266   	; 0xde <calculate_pid>
			
			default:
					{calculate_pid();
 5d0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <PID_value>
					OCR3A = 0X8907+PID_value; 
 5d4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <PID_value+0x1>
 5d8:	89 5f       	subi	r24, 0xF9	; 249
 5da:	96 47       	sbci	r25, 0x76	; 118
 5dc:	f6 01       	movw	r30, r12
 5de:	91 83       	std	Z+1, r25	; 0x01
 5e0:	80 83       	st	Z, r24
 5e2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <PID_value>
					OCR3B = 0XB3FF-PID_value; //B3FF=46079=(65535*180)/256
 5e6:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <PID_value+0x1>
 5ea:	97 01       	movw	r18, r14
 5ec:	28 1b       	sub	r18, r24
 5ee:	39 0b       	sbc	r19, r25
 5f0:	f8 01       	movw	r30, r16
 5f2:	31 83       	std	Z+1, r19	; 0x01
 5f4:	20 83       	st	Z, r18
 5f6:	b5 de       	rcall	.-662    	; 0x362 <fwd>
 5f8:	61 9b       	sbis	0x0c, 1	; 12
					fwd();}
 5fa:	84 cf       	rjmp	.-248    	; 0x504 <main+0x56>
 5fc:	77 9a       	sbi	0x0e, 7	; 14
			}
		
		
		}
		
		if (!(CHECKBIT(PINE, SW2))){
 5fe:	76 98       	cbi	0x0e, 6	; 14
 600:	81 cf       	rjmp	.-254    	; 0x504 <main+0x56>

00000602 <__divmodhi4>:
		SETBIT(PORTE, LED2);     
 602:	97 fb       	bst	r25, 7
		CLEARBIT(PORTE, LED1); 
 604:	07 2e       	mov	r0, r23
 606:	16 f4       	brtc	.+4      	; 0x60c <__divmodhi4+0xa>
 608:	00 94       	com	r0
 60a:	06 d0       	rcall	.+12     	; 0x618 <__divmodhi4_neg1>
 60c:	77 fd       	sbrc	r23, 7
 60e:	08 d0       	rcall	.+16     	; 0x620 <__divmodhi4_neg2>
 610:	0b d0       	rcall	.+22     	; 0x628 <__udivmodhi4>
 612:	07 fc       	sbrc	r0, 7
 614:	05 d0       	rcall	.+10     	; 0x620 <__divmodhi4_neg2>
 616:	3e f4       	brtc	.+14     	; 0x626 <__divmodhi4_exit>

00000618 <__divmodhi4_neg1>:
 618:	90 95       	com	r25
 61a:	81 95       	neg	r24
 61c:	9f 4f       	sbci	r25, 0xFF	; 255
 61e:	08 95       	ret

00000620 <__divmodhi4_neg2>:
 620:	70 95       	com	r23
 622:	61 95       	neg	r22
 624:	7f 4f       	sbci	r23, 0xFF	; 255

00000626 <__divmodhi4_exit>:
 626:	08 95       	ret

00000628 <__udivmodhi4>:
 628:	aa 1b       	sub	r26, r26
 62a:	bb 1b       	sub	r27, r27
 62c:	51 e1       	ldi	r21, 0x11	; 17
 62e:	07 c0       	rjmp	.+14     	; 0x63e <__udivmodhi4_ep>

00000630 <__udivmodhi4_loop>:
 630:	aa 1f       	adc	r26, r26
 632:	bb 1f       	adc	r27, r27
 634:	a6 17       	cp	r26, r22
 636:	b7 07       	cpc	r27, r23
 638:	10 f0       	brcs	.+4      	; 0x63e <__udivmodhi4_ep>
 63a:	a6 1b       	sub	r26, r22
 63c:	b7 0b       	sbc	r27, r23

0000063e <__udivmodhi4_ep>:
 63e:	88 1f       	adc	r24, r24
 640:	99 1f       	adc	r25, r25
 642:	5a 95       	dec	r21
 644:	a9 f7       	brne	.-22     	; 0x630 <__udivmodhi4_loop>
 646:	80 95       	com	r24
 648:	90 95       	com	r25
 64a:	bc 01       	movw	r22, r24
 64c:	cd 01       	movw	r24, r26
 64e:	08 95       	ret

00000650 <_exit>:
 650:	f8 94       	cli

00000652 <__stop_program>:
 652:	ff cf       	rjmp	.-2      	; 0x652 <__stop_program>
